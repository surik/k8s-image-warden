syntax = "proto3";

option go_package = "/proto";

package proto;

service ControllerService {
    rpc Report(ReportRequest) returns (ReportResponse) {}
    rpc GetReport(GetReportRequest) returns (GetReportResponse) {}
    rpc GetRules(GetRulesRequest) returns (GetRulesResponse) {}
    rpc Validate(ValidateRequest) returns (ValidateResponse) {}
    rpc Mutate(MutateRequest) returns (MutateResponse) {}
}

// https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.proto

message Version {
    // Version of the kubelet runtime API.
    string version = 1;
    // Name of the container runtime.
    string runtime_name = 2;
    // Version of the container runtime. The string must be
    // semver-compatible.
    string runtime_version = 3;
    // API version of the container runtime. The string must be
    // semver-compatible.
    string runtime_api_version = 4;
}

// FilesystemIdentifier uniquely identify the filesystem.
message FilesystemIdentifier{
    // Mountpoint of a filesystem.
    string mountpoint = 1;
}

// UInt64Value is the wrapper of uint64.
message UInt64Value {
    // The value.
    uint64 value = 1;
}

// Int64Value is the wrapper of int64.
message Int64Value {
    // The value.
    int64 value = 1;
}

// FilesystemUsage provides the filesystem usage information.
message FilesystemUsage {
    // Timestamp in nanoseconds at which the information were collected. Must be > 0.
    int64 timestamp = 1;
    // The unique identifier of the filesystem.
    FilesystemIdentifier fs_id = 2;
    // UsedBytes represents the bytes used for images on the filesystem.
    // This may differ from the total bytes used on the filesystem and may not
    // equal CapacityBytes - AvailableBytes.
    UInt64Value used_bytes = 3;
    // InodesUsed represents the inodes used by the images.
    // This may not equal InodesCapacity - InodesAvailable because the underlying
    // filesystem may also be used for purposes other than storing images.
    UInt64Value inodes_used = 4;
}

// ImageSpec is an internal representation of an image.
message ImageSpec {
    // Container's Image field (e.g. imageID or imageDigest).
    string image = 1;
    // Unstructured key-value map holding arbitrary metadata.
    // ImageSpec Annotations can be used to help the runtime target specific
    // images in multi-arch images.
    map<string, string> annotations = 2;
    // The container image reference specified by the user (e.g. image[:tag] or digest).
    // Only set if available within the RPC context.
    string user_specified_image = 18;
}

// Basic information about a container image.
message Image {
    // ID of the image.
    string id = 1;
    // Other names by which this image is known.
    repeated string repo_tags = 2;
    // Digests by which this image is known.
    repeated string repo_digests = 3;
    // Size of the image in bytes. Must be > 0.
    uint64 size = 4;
    // UID that will run the command(s). This is used as a default if no user is
    // specified when creating the container. UID and the following user name
    // are mutually exclusive.
    Int64Value uid = 5;
    // User name that will run the command(s). This is used if UID is not set
    // and no user is specified when creating container.
    string username = 6;
    // ImageSpec for image which includes annotations
    ImageSpec spec = 7;
    // Recommendation on whether this image should be exempt from garbage collection.
    // It must only be treated as a recommendation -- the client can still request that the image be deleted,
    // and the runtime must oblige.
    bool pinned = 8;
}

// end of cri-api

message RuntimeInfo {
    string podname = 1;

    string nodename = 2;

    string agent_version = 3;

    Version runtime_version = 4;
}

message FilesystemUsageList {
    repeated FilesystemUsage image_filesystems = 1;
}

message ImageList {
    repeated Image images = 1;
}

message ReportRequest {
    RuntimeInfo runtime_info = 1;

    FilesystemUsageList filesystem_usage_list = 2;
    
    ImageList image_list = 3;
}

message ReportResponse {
}

message GetReportRequest {
    string nodename = 1;

    bool all = 2;
}

message GetReportResponse {
    map<string, RuntimeInfo> runtime = 1;

    map<string, FilesystemUsageList> filesystem_usage = 2;

    map<string, ImageList> image = 3;
}

message GetRulesRequest {
}

message GetRulesResponse {
    bytes raw_rules = 1;
}

message ValidateRequest {
    string image = 1;
}

message ValidateResponse {
    bool valid = 1;

    string rule = 2;
}

message MutateRequest {
    string image = 1;
}

message MutateResponse {
    string image = 1;

    repeated string rules = 2;
}